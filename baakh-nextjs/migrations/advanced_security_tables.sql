-- Advanced Security Tables Migration
-- This migration creates tables for IP whitelisting, threat detection, security scanning, and alerts

-- IP Whitelist Table
CREATE TABLE IF NOT EXISTS public.ip_whitelist (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ip_address text NOT NULL,
    description text NOT NULL,
    is_active boolean DEFAULT true NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    created_by uuid REFERENCES auth.users(id) ON DELETE SET NULL,
    expires_at timestamp with time zone
);

-- IP Whitelist Patterns Table
CREATE TABLE IF NOT EXISTS public.ip_whitelist_patterns (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ip_pattern text NOT NULL,
    description text NOT NULL,
    is_active boolean DEFAULT true NOT NULL,
    priority integer DEFAULT 1 NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    created_by uuid REFERENCES auth.users(id) ON DELETE SET NULL
);

-- Threat Patterns Table
CREATE TABLE IF NOT EXISTS public.threat_patterns (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL,
    pattern_type text NOT NULL CHECK (pattern_type IN ('behavioral', 'network', 'application', 'data')),
    description text NOT NULL,
    rules jsonb NOT NULL,
    severity text NOT NULL CHECK (severity IN ('low', 'medium', 'high', 'critical')),
    is_active boolean DEFAULT true NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    created_by uuid REFERENCES auth.users(id) ON DELETE SET NULL
);

-- Threat Events Table
CREATE TABLE IF NOT EXISTS public.threat_events (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    event_type text NOT NULL,
    severity text NOT NULL CHECK (severity IN ('low', 'medium', 'high', 'critical')),
    ip_address text NOT NULL,
    user_id uuid REFERENCES auth.users(id) ON DELETE SET NULL,
    details jsonb NOT NULL,
    detected_at timestamp with time zone DEFAULT now() NOT NULL,
    status text DEFAULT 'active' NOT NULL CHECK (status IN ('active', 'investigating', 'resolved', 'false_positive')),
    resolved_at timestamp with time zone,
    resolved_by uuid REFERENCES auth.users(id) ON DELETE SET NULL
);

-- Security Scan Results Table
CREATE TABLE IF NOT EXISTS public.security_scan_results (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    scan_type text NOT NULL CHECK (scan_type IN ('vulnerability', 'configuration', 'dependency', 'code_quality', 'access_control')),
    severity text NOT NULL CHECK (severity IN ('low', 'medium', 'high', 'critical')),
    title text NOT NULL,
    description text NOT NULL,
    recommendation text NOT NULL,
    file_path text,
    line_number integer,
    cwe_id text,
    cvss_score numeric(3,1),
    detected_at timestamp with time zone DEFAULT now() NOT NULL,
    status text DEFAULT 'new' NOT NULL CHECK (status IN ('new', 'acknowledged', 'fixed', 'false_positive')),
    fixed_at timestamp with time zone,
    fixed_by uuid REFERENCES auth.users(id) ON DELETE SET NULL
);

-- Security Scans Table
CREATE TABLE IF NOT EXISTS public.security_scans (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    scan_type text NOT NULL,
    status text NOT NULL CHECK (status IN ('scheduled', 'running', 'completed', 'failed')),
    issues_found integer DEFAULT 0 NOT NULL,
    scanned_at timestamp with time zone,
    scheduled_at timestamp with time zone,
    completed_at timestamp with time zone,
    created_by uuid REFERENCES auth.users(id) ON DELETE SET NULL
);

-- Security Alerts Table
CREATE TABLE IF NOT EXISTS public.security_alerts (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    alert_type text NOT NULL CHECK (alert_type IN ('threat_detected', 'brute_force', 'suspicious_activity', 'vulnerability_found', 'access_denied', 'system_anomaly')),
    severity text NOT NULL CHECK (severity IN ('low', 'medium', 'high', 'critical')),
    title text NOT NULL,
    description text NOT NULL,
    ip_address text,
    user_id uuid REFERENCES auth.users(id) ON DELETE SET NULL,
    details jsonb NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    status text DEFAULT 'new' NOT NULL CHECK (status IN ('new', 'acknowledged', 'investigating', 'resolved', 'false_positive')),
    resolved_at timestamp with time zone,
    resolved_by uuid REFERENCES auth.users(id) ON DELETE SET NULL,
    notification_sent boolean DEFAULT false NOT NULL
);

-- Alert Rules Table
CREATE TABLE IF NOT EXISTS public.alert_rules (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name text NOT NULL,
    alert_type text NOT NULL,
    conditions jsonb NOT NULL,
    severity text NOT NULL CHECK (severity IN ('low', 'medium', 'high', 'critical')),
    is_active boolean DEFAULT true NOT NULL,
    notification_channels text[] DEFAULT '{}' NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    created_by uuid REFERENCES auth.users(id) ON DELETE SET NULL
);

-- Security Events Table (for real-time monitoring)
CREATE TABLE IF NOT EXISTS public.security_events (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    event_type text NOT NULL,
    ip_address text NOT NULL,
    user_id uuid REFERENCES auth.users(id) ON DELETE SET NULL,
    details jsonb NOT NULL,
    threat_score integer DEFAULT 0 NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);

-- Indexes for performance
CREATE INDEX IF NOT EXISTS idx_ip_whitelist_ip_address ON public.ip_whitelist(ip_address);
CREATE INDEX IF NOT EXISTS idx_ip_whitelist_active ON public.ip_whitelist(is_active);
CREATE INDEX IF NOT EXISTS idx_ip_whitelist_patterns_active ON public.ip_whitelist_patterns(is_active);
CREATE INDEX IF NOT EXISTS idx_threat_patterns_active ON public.threat_patterns(is_active);
CREATE INDEX IF NOT EXISTS idx_threat_events_detected_at ON public.threat_events(detected_at);
CREATE INDEX IF NOT EXISTS idx_threat_events_severity ON public.threat_events(severity);
CREATE INDEX IF NOT EXISTS idx_threat_events_ip_address ON public.threat_events(ip_address);
CREATE INDEX IF NOT EXISTS idx_security_scan_results_detected_at ON public.security_scan_results(detected_at);
CREATE INDEX IF NOT EXISTS idx_security_scan_results_severity ON public.security_scan_results(severity);
CREATE INDEX IF NOT EXISTS idx_security_alerts_created_at ON public.security_alerts(created_at);
CREATE INDEX IF NOT EXISTS idx_security_alerts_severity ON public.security_alerts(severity);
CREATE INDEX IF NOT EXISTS idx_security_alerts_status ON public.security_alerts(status);
CREATE INDEX IF NOT EXISTS idx_security_events_created_at ON public.security_events(created_at);
CREATE INDEX IF NOT EXISTS idx_security_events_ip_address ON public.security_events(ip_address);

-- Row Level Security Policies
ALTER TABLE public.ip_whitelist ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.ip_whitelist_patterns ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.threat_patterns ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.threat_events ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.security_scan_results ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.security_scans ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.security_alerts ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.alert_rules ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.security_events ENABLE ROW LEVEL SECURITY;

-- IP Whitelist Policies
CREATE POLICY "Enable read access for authenticated users" ON public.ip_whitelist FOR SELECT TO authenticated USING (true);
CREATE POLICY "Enable insert for authenticated users" ON public.ip_whitelist FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "Enable update for authenticated users" ON public.ip_whitelist FOR UPDATE TO authenticated USING (true);
CREATE POLICY "Enable delete for authenticated users" ON public.ip_whitelist FOR DELETE TO authenticated USING (true);

-- IP Whitelist Patterns Policies
CREATE POLICY "Enable read access for authenticated users" ON public.ip_whitelist_patterns FOR SELECT TO authenticated USING (true);
CREATE POLICY "Enable insert for authenticated users" ON public.ip_whitelist_patterns FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "Enable update for authenticated users" ON public.ip_whitelist_patterns FOR UPDATE TO authenticated USING (true);
CREATE POLICY "Enable delete for authenticated users" ON public.ip_whitelist_patterns FOR DELETE TO authenticated USING (true);

-- Threat Patterns Policies
CREATE POLICY "Enable read access for authenticated users" ON public.threat_patterns FOR SELECT TO authenticated USING (true);
CREATE POLICY "Enable insert for authenticated users" ON public.threat_patterns FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "Enable update for authenticated users" ON public.threat_patterns FOR UPDATE TO authenticated USING (true);
CREATE POLICY "Enable delete for authenticated users" ON public.threat_patterns FOR DELETE TO authenticated USING (true);

-- Threat Events Policies
CREATE POLICY "Enable read access for authenticated users" ON public.threat_events FOR SELECT TO authenticated USING (true);
CREATE POLICY "Enable insert for service role" ON public.threat_events FOR INSERT TO service_role WITH CHECK (true);
CREATE POLICY "Enable update for authenticated users" ON public.threat_events FOR UPDATE TO authenticated USING (true);

-- Security Scan Results Policies
CREATE POLICY "Enable read access for authenticated users" ON public.security_scan_results FOR SELECT TO authenticated USING (true);
CREATE POLICY "Enable insert for service role" ON public.security_scan_results FOR INSERT TO service_role WITH CHECK (true);
CREATE POLICY "Enable update for authenticated users" ON public.security_scan_results FOR UPDATE TO authenticated USING (true);

-- Security Scans Policies
CREATE POLICY "Enable read access for authenticated users" ON public.security_scans FOR SELECT TO authenticated USING (true);
CREATE POLICY "Enable insert for authenticated users" ON public.security_scans FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "Enable update for authenticated users" ON public.security_scans FOR UPDATE TO authenticated USING (true);

-- Security Alerts Policies
CREATE POLICY "Enable read access for authenticated users" ON public.security_alerts FOR SELECT TO authenticated USING (true);
CREATE POLICY "Enable insert for service role" ON public.security_alerts FOR INSERT TO service_role WITH CHECK (true);
CREATE POLICY "Enable update for authenticated users" ON public.security_alerts FOR UPDATE TO authenticated USING (true);

-- Alert Rules Policies
CREATE POLICY "Enable read access for authenticated users" ON public.alert_rules FOR SELECT TO authenticated USING (true);
CREATE POLICY "Enable insert for authenticated users" ON public.alert_rules FOR INSERT TO authenticated WITH CHECK (true);
CREATE POLICY "Enable update for authenticated users" ON public.alert_rules FOR UPDATE TO authenticated USING (true);
CREATE POLICY "Enable delete for authenticated users" ON public.alert_rules FOR DELETE TO authenticated USING (true);

-- Security Events Policies
CREATE POLICY "Enable read access for authenticated users" ON public.security_events FOR SELECT TO authenticated USING (true);
CREATE POLICY "Enable insert for service role" ON public.security_events FOR INSERT TO service_role WITH CHECK (true);

-- Insert some default threat patterns
INSERT INTO public.threat_patterns (name, pattern_type, description, rules, severity, created_by) VALUES
('Brute Force Attack', 'behavioral', 'Detects multiple failed login attempts from the same IP', 
 '[{"field": "attempt_count", "operator": "greater_than", "value": 10, "weight": 100}]', 
 'high', (SELECT id FROM auth.users LIMIT 1)),
('Suspicious API Usage', 'behavioral', 'Detects unusual API usage patterns', 
 '[{"field": "api_call_count", "operator": "greater_than", "value": 1000, "weight": 80}]', 
 'medium', (SELECT id FROM auth.users LIMIT 1)),
('Data Exfiltration', 'data', 'Detects large data requests', 
 '[{"field": "data_size", "operator": "greater_than", "value": 1000000, "weight": 90}]', 
 'high', (SELECT id FROM auth.users LIMIT 1));

-- Insert some default alert rules
INSERT INTO public.alert_rules (name, alert_type, conditions, severity, notification_channels, created_by) VALUES
('Critical Threat Alert', 'threat_detected', 
 '[{"field": "severity", "operator": "equals", "value": "critical", "weight": 100}]', 
 'critical', '["email", "slack", "webhook"]', (SELECT id FROM auth.users LIMIT 1)),
('Brute Force Alert', 'brute_force', 
 '[{"field": "attempt_count", "operator": "greater_than", "value": 5, "weight": 80}]', 
 'high', '["email", "slack"]', (SELECT id FROM auth.users LIMIT 1)),
('Suspicious Activity Alert', 'suspicious_activity', 
 '[{"field": "threat_score", "operator": "greater_than", "value": 70, "weight": 70}]', 
 'medium', '["slack"]', (SELECT id FROM auth.users LIMIT 1));



