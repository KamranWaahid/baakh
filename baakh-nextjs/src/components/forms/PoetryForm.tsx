"use client";

import React, { useState, useEffect, useMemo } from 'react';
import { useAuth } from '@/lib/hooks/useAuth';
import { useRouter } from 'next/navigation';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { 
  Plus, 
  X, 
  Save, 
  Loader2, 
  Wand2, 
  Check, 
  ArrowRight, 
  ArrowLeft,
  CheckCircle, 
  Globe, 
  BookOpen, 
  Type, 
  RefreshCw, 
  Edit 
} from 'lucide-react';
import { toast } from 'sonner';

interface Poet {
  id: string;
  sindhi_name: string;
  english_name: string;
}

interface Category {
  id: string;
  slug: string;
}

interface SindhiCouplet {
  text: string;
  slug: string;
  romanized: boolean;
}

interface EnglishCouplet {
  text: string;
  autoGenerated: boolean;
  reviewed: boolean;
}

type WorkflowState = 'draft' | 'ready_for_roman' | 'published';

interface PoetryFormProps {
  poetry?: {
    id?: string;
    sindhi_title?: string;
    english_title?: string;
    poet_id?: string;
    category_id?: string;
    poetry_slug?: string;
    poetry_tags?: string;
    poetry_couplets?: Array<{
      couplet_text?: string;
      couplet_slug?: string;
      romanized?: boolean;
      english_text?: string;
      auto_generated?: boolean;
      reviewed?: boolean;
    }>;
  };
  mode: 'create' | 'edit';
}

export default function PoetryForm({ poetry, mode }: PoetryFormProps) {
  const router = useRouter();
  const { user, loading: authLoading } = useAuth();
  const [loading, setLoading] = useState(false);
  const [poets, setPoets] = useState<Poet[]>([]);
  const [categories, setCategories] = useState<Category[]>([]);
  
  // Check for URL parameters from romanizer
  useEffect(() => {
    if (typeof window !== 'undefined') {
      const urlParams = new URLSearchParams(window.location.search);
      const mode = urlParams.get('mode');
      
      if (mode === 'from_romanizer' || mode === 'from_romanizer_couplets') {
        const sindhiContent = urlParams.get('sindhi_content');
        const romanContent = urlParams.get('roman_content');
        
        if (sindhiContent && romanContent) {
          // Pre-fill the form with content from romanizer
          if (mode === 'from_romanizer_couplets') {
            try {
              const sindhiLines = JSON.parse(urlParams.get('sindhi_lines') || '[]');
              const romanLines = JSON.parse(urlParams.get('roman_lines') || '[]');
              
              // Create couplets from the lines
              const newSindhiCouplets = sindhiLines.map((line: string, index: number) => ({
                text: line,
                slug: `couplet-${index + 1}`,
                romanized: true
              }));
              
              const newEnglishCouplets = romanLines.map((line: string, index: number) => ({
                text: line,
                autoGenerated: true,
                reviewed: false
              }));
              
              setSindhiCouplets(newSindhiCouplets);
              setEnglishCouplets(newEnglishCouplets);
            } catch (error) {
              console.error('Error parsing couplet data:', error);
            }
          }
          
          // Set status to ready for roman if we have content
          setCurrentStatus('ready_for_roman');
          
          // Show success message
          toast.success('Content pre-filled from Romanizer! Ready to review and publish.');
        }
      }
    }
  }, []);

    // Workflow state
  const [currentStatus, setCurrentStatus] = useState<WorkflowState>('draft');
  const [romanizationReviewed, setRomanizationReviewed] = useState(false);
  
  // Form state
  const [sindhiTitle, setSindhiTitle] = useState(poetry?.sindhi_title || '');
  const [englishTitle, setEnglishTitle] = useState(poetry?.english_title || '');
  const [selectedPoet, setSelectedPoet] = useState(poetry?.poet_id || '');
  const [selectedCategory, setSelectedCategory] = useState(poetry?.category_id || '');
  const [poetrySlug, setPoetrySlug] = useState(poetry?.poetry_slug || '');
  const [poetryTags, setPoetryTags] = useState(poetry?.poetry_tags || '');
  
  // Form progression state
  const [hasSindhiTitle, setHasSindhiTitle] = useState(!!poetry?.sindhi_title);
  const [hasSlug, setHasSlug] = useState(!!poetry?.poetry_slug);
  const [hasSindhiCouplets, setHasSindhiCouplets] = useState(!!poetry?.poetry_couplets?.length);
  const [hasEnglishTitle, setHasEnglishTitle] = useState(!!poetry?.english_title);

    // Couplets
  const [sindhiCouplets, setSindhiCouplets] = useState<SindhiCouplet[]>(
    poetry?.poetry_couplets?.map((c: {
      couplet_text?: string;
      couplet_slug?: string;
      romanized?: boolean;
    }) => ({
      text: c.couplet_text || '',
      slug: c.couplet_slug || '',
      romanized: c.romanized || false
    })) || []
  );
  
  const [englishCouplets, setEnglishCouplets] = useState<EnglishCouplet[]>(
    poetry?.poetry_couplets?.map((c: {
      english_text?: string;
      auto_generated?: boolean;
      reviewed?: boolean;
    }) => ({
      text: c.english_text || '',
      autoGenerated: c.auto_generated || false,
      reviewed: c.reviewed || false
    })) || []
  );

  // Update progression state when values change
  useEffect(() => {
    setHasSindhiTitle(!!sindhiTitle.trim());
  }, [sindhiTitle]);

  useEffect(() => {
    setHasSlug(!!poetrySlug.trim());
  }, [poetrySlug]);

  useEffect(() => {
    setHasSindhiCouplets(sindhiCouplets.length > 0 && sindhiCouplets.every(c => c.text.trim()));
  }, [sindhiCouplets]);

  useEffect(() => {
    setHasEnglishTitle(!!englishTitle.trim());
  }, [englishTitle]);

  // Validation state
  const [validationErrors, setValidationErrors] = useState<string[]>([]);

  // Memoize validation results to prevent infinite re-renders
  const validationResult = useMemo(() => {
    const errors: string[] = [];
    
    // Basic requirements
    if (!sindhiTitle.trim()) {
      errors.push("Sindhi title is required");
    }
    if (!selectedPoet) {
      errors.push("Poet selection is required");
    }
    if (!selectedCategory) {
      errors.push("Category selection is required");
    }
    if (sindhiCouplets.length === 0) {
      errors.push("At least one couplet is required");
    }
    
    // Validate individual couplets
    sindhiCouplets.forEach((couplet, index) => {
      if (!couplet.text.trim()) {
        errors.push(`Couplet ${index + 1} text is required`);
      }
    });
    
    return errors;
  }, [sindhiTitle, selectedPoet, selectedCategory, sindhiCouplets]);

  const romanizationValidationResult = useMemo(() => {
    const errors: string[] = [];
    
    // Check if all couplets have Roman text
    const incompleteCouplets = englishCouplets.filter((couplet, index) => {
      const sindhiCouplet = sindhiCouplets[index];
      return sindhiCouplet && sindhiCouplet.text.trim() && !couplet.text.trim();
    });
    
    if (incompleteCouplets.length > 0) {
      errors.push(`${incompleteCouplets.length} couplets still need romanization`);
    }
    
    // Check if Roman text has been reviewed
    if (!romanizationReviewed) {
      errors.push("Romanization needs to be reviewed before publishing");
    }
    
    return errors;
  }, [englishCouplets, sindhiCouplets, romanizationReviewed]);

  // Update validation errors when validation results change
  useEffect(() => {
    setValidationErrors(validationResult);
  }, [validationResult, englishCouplets]);

  // Fetch poets and categories on component mount
  useEffect(() => {
    fetchPoets();
    fetchCategories();
  }, []);

  // Update English couplets when Sindhi couplets change
  useEffect(() => {
    if (sindhiCouplets.length > englishCouplets.length) {
      const newEnglishCouplets = [...englishCouplets];
      while (newEnglishCouplets.length < sindhiCouplets.length) {
        newEnglishCouplets.push({
          text: '',
          autoGenerated: false,
          reviewed: false
        });
      }
      setEnglishCouplets(newEnglishCouplets);
    } else if (sindhiCouplets.length < englishCouplets.length) {
      setEnglishCouplets(englishCouplets.slice(0, sindhiCouplets.length));
    }
  }, [sindhiCouplets.length]);

  const fetchPoets = async () => {
    try {
      const response = await fetch('/api/poets/');
      if (response.ok) {
        const data = await response.json();
        setPoets(data.poets || []);
      }
    } catch (error) {
      console.error('Error fetching poets:', error);
    }
  };

  const fetchCategories = async () => {
    try {
      const response = await fetch('/api/categories/');
      if (response.ok) {
        const data = await response.json();
        setCategories(data.categories || []);
      }
    } catch (error) {
      console.error('Error fetching categories:', error);
    }
  };

  // Validation functions
  const validateDraftRequirements = (): boolean => {
    return validationResult.length === 0;
  };

  const validateRomanizationComplete = (): boolean => {
    return romanizationValidationResult.length === 0;
  };

  const canProceedToRoman = (): boolean => {
    return validateDraftRequirements();
  };

  const canPublish = (): boolean => {
    return validateRomanizationComplete();
  };

  // Couplet management
  const addCouplet = () => {
    setSindhiCouplets(prev => [...prev, { text: '', slug: '', romanized: false }]);
    
    // Also add corresponding English couplet
    setEnglishCouplets(prev => [...prev, { text: '', autoGenerated: false, reviewed: false }]);
  };

  const removeCouplet = (index: number) => {
    setSindhiCouplets(prev => prev.filter((_, i) => i !== index));
    setEnglishCouplets(prev => prev.filter((_, i) => i !== index));
  };

  const updateCouplet = (index: number, field: keyof SindhiCouplet, value: string | boolean) => {
    setSindhiCouplets(prev => prev.map((couplet, i) => 
      i === index ? { ...couplet, [field]: value } : couplet
    ));
  };

  const updateEnglishCouplet = (index: number, field: keyof EnglishCouplet, value: string | boolean) => {
    setEnglishCouplets(prev => prev.map((couplet, i) => 
      i === index ? { ...couplet, [field]: value } : couplet
    ));
  };

  // Romanization functions
  const generateAllRoman = async () => {
    if (!hasEnglishTitle) {
      toast.error('Please generate English title first');
      return;
    }
    
    if (sindhiCouplets.length === 0) {
      toast.error('Please add Sindhi couplets first');
      return;
    }
    
    setLoading(true);
    try {
      // Call the romanizer API for each couplet
      const newEnglishCouplets = await Promise.all(
        sindhiCouplets.map(async (couplet) => {
          if (!couplet.text.trim()) {
            return { text: '', autoGenerated: false, reviewed: false };
          }
          
          try {
            const response = await fetch('/api/admin/romanizer/', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({
                text: couplet.text,
                mode: 'smart',
                operation: 'romanize'
              })
            });
            
            if (response.ok) {
              const data = await response.json();
              return {
                text: data.romanized || couplet.text,
                autoGenerated: true,
                reviewed: false
              };
            } else {
              return {
                text: `Failed to romanize: ${couplet.text}`,
                autoGenerated: false,
                reviewed: false
              };
            }
          } catch (error) {
            console.error('Error romanizing couplet:', error);
            return {
              text: `Error romanizing: ${couplet.text}`,
              autoGenerated: false,
              reviewed: false
            };
          }
        })
      );
      
      setEnglishCouplets(newEnglishCouplets);
      toast.success("Romanization generated successfully!");
    } catch (error) {
      toast.error("Failed to generate romanization");
      console.error('Error generating romanization:', error);
    } finally {
      setLoading(false);
    }
  };

  const regenerateRoman = async (index: number) => {
    const sindhiCouplet = sindhiCouplets[index];
    if (!sindhiCouplet?.text) return;
    
    try {
      const response = await fetch('/api/admin/romanizer/', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          text: sindhiCouplet.text,
          mode: 'smart',
          operation: 'romanize'
        })
      });
      
      if (response.ok) {
        const data = await response.json();
        updateEnglishCouplet(index, 'text', data.romanized || sindhiCouplet.text);
        updateEnglishCouplet(index, 'autoGenerated', true);
        updateEnglishCouplet(index, 'reviewed', false);
        toast.success('Couplet regenerated successfully!');
      } else {
        toast.error('Failed to regenerate couplet');
        console.error('Regeneration failed:', response.statusText);
      }
    } catch (error) {
      toast.error('Error regenerating couplet');
      console.error('Regeneration error:', error);
    }
  };

  const editManually = (index: number) => {
    updateEnglishCouplet(index, 'autoGenerated', false);
    updateEnglishCouplet(index, 'reviewed', true);
  };

  // Generate slug from Sindhi title using romanizer
  const generateSlug = async () => {
    if (!sindhiTitle.trim()) {
      toast.error('Please enter a Sindhi title first');
      return;
    }
    
    setLoading(true);
    try {
      // Call the romanizer API to convert Sindhi title to roman
      const response = await fetch('/api/admin/romanizer/', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          text: sindhiTitle,
          mode: 'smart',
          operation: 'romanize'
        })
      });
      
      if (response.ok) {
        const data = await response.json();
        const romanTitle = data.romanized || sindhiTitle;
        // Convert to slug format
        const slug = romanTitle
          .toLowerCase()
          .replace(/[^a-z0-9\s-]/g, '')
          .replace(/\s+/g, '-')
          .replace(/-+/g, '-')
          .trim();
        
        setPoetrySlug(slug);
        setHasSlug(true);
        toast.success('Slug generated successfully!');
      } else {
        throw new Error('Failed to generate slug');
      }
    } catch (error) {
      toast.error('Failed to generate slug. Please try again.');
      console.error('Error generating slug:', error);
    } finally {
      setLoading(false);
    }
  };

  // Generate English title from Sindhi title
  const generateEnglishTitle = async () => {
    if (!sindhiTitle.trim()) {
      toast.error('Please enter a Sindhi title first');
      return;
    }
    
    setLoading(true);
    try {
      // Call the romanizer API to convert Sindhi title to roman
      const response = await fetch('/api/admin/romanizer/', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          text: sindhiTitle,
          mode: 'smart',
          operation: 'romanize'
        })
      });
      
      if (response.ok) {
        const data = await response.json();
        const romanTitle = data.romanized || sindhiTitle;
        // Convert to proper English title format
        const englishTitle = romanTitle
          .split(' ')
          .map((word: string) => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
          .join(' ');
        
        setEnglishTitle(englishTitle);
        setHasEnglishTitle(true);
        toast.success('English title generated successfully!');
      } else {
        throw new Error('Failed to generate English title');
      }
    } catch (error) {
      toast.error('Failed to generate English title. Please try again.');
      console.error('Error generating English title:', error);
    } finally {
      setLoading(false);
    }
  };

  // Workflow actions
  const saveAsDraft = async () => {
    if (!validateDraftRequirements()) return;
    
    setLoading(true);
    try {
      // Save as draft logic here
      toast.success("Draft saved successfully!");
    } catch {
      toast.error("Failed to save draft");
    } finally {
      setLoading(false);
    }
  };

  const markReadyForRoman = () => {
    if (canProceedToRoman()) {
      setCurrentStatus('ready_for_roman');
      toast.success("Ready for Romanization!");
    }
  };

  const markReadyForPublish = () => {
    setRomanizationReviewed(true);
    toast.success("Romanization marked as reviewed!");
  };

  const publishPoetry = async () => {
    if (!canPublish()) return;
    
    setLoading(true);
    try {
      // Publish logic here
      setCurrentStatus('published');
      toast.success("Poetry published successfully!");
    } catch {
      toast.error("Failed to publish poetry");
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (currentStatus === 'draft') {
      await saveAsDraft();
    } else if (currentStatus === 'ready_for_roman') {
      markReadyForRoman();
    } else if (currentStatus === 'published') {
      await publishPoetry();
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <fieldset disabled={authLoading || !user} className="disabled:opacity-60 disabled:pointer-events-none">
              {/* Header Section */}
        <Card className="mb-6">
          <CardHeader>
            <div className="flex items-center justify-between">
              <div>
                <CardTitle>Create New Poetry</CardTitle>
                {typeof window !== 'undefined' && new URLSearchParams(window.location.search).get('mode')?.includes('from_romanizer') && (
                  <div className="flex items-center gap-2 mt-2">
                    <Badge variant="secondary" className="text-xs">
                      <Wand2 className="w-3 h-3 mr-1" />
                      From Romanizer
                    </Badge>
                    <span className="text-sm text-muted-foreground">
                      Content pre-filled from Romanizer workflow
                    </span>
                  </div>
                )}
              </div>
              <div className="flex items-center gap-3">
                <Badge variant={currentStatus === 'draft' ? 'outline' : currentStatus === 'ready_for_roman' ? 'secondary' : 'default'}>
                  {currentStatus === 'draft' ? 'Draft' : currentStatus === 'ready_for_roman' ? 'Ready for Roman' : 'Published'}
                </Badge>
                {currentStatus === 'draft' && (
                  <Button variant="outline" size="sm" onClick={saveAsDraft} disabled={loading}>
                    <Save className="w-4 h-4 mr-2" />
                    Save Draft
                  </Button>
                )}
              </div>
            </div>
          </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="sindhi_title">Sindhi Title *</Label>
              <Input
                id="sindhi_title"
                value={sindhiTitle}
                onChange={(e) => setSindhiTitle(e.target.value)}
                placeholder="شاعري جو عنوان"
                className="sindhi-text text-right"
                dir="rtl"
                style={{ direction: 'rtl', textAlign: 'right' }}
                required
              />
            </div>
            <div>
              <Label htmlFor="english_title">English Title</Label>
              <div className="flex gap-2">
                <Input
                  id="english_title"
                  value={englishTitle}
                  onChange={(e) => setEnglishTitle(e.target.value)}
                  placeholder="Poetry Title"
                  disabled={!hasSindhiCouplets}
                />
                {hasSindhiCouplets && !hasEnglishTitle && (
                  <Button 
                    type="button" 
                    variant="outline" 
                    size="sm" 
                    onClick={generateEnglishTitle}
                    disabled={loading}
                  >
                    <Wand2 className="w-4 h-4 mr-2" />
                    Generate Roman Title
                  </Button>
                )}
              </div>
            </div>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="poet">Poet *</Label>
              <Select value={selectedPoet} onValueChange={setSelectedPoet} disabled={!hasSindhiTitle}>
                <SelectTrigger>
                  <SelectValue placeholder="Select poet" />
                </SelectTrigger>
                <SelectContent>
                  {poets.map((poet) => (
                    <SelectItem key={poet.id} value={poet.id}>
                      <span className="sindhi-text" dir="rtl">{poet.sindhi_name}</span> ({poet.english_name})
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
            <div>
              <Label htmlFor="category">Category *</Label>
              <Select value={selectedCategory} onValueChange={setSelectedCategory} disabled={!hasSindhiTitle}>
                <SelectTrigger>
                  <SelectValue placeholder="Select category" />
                </SelectTrigger>
                <SelectContent>
                  {categories.map((category) => (
                    <SelectItem key={category.id} value={category.id}>
                      {category.slug}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <Label htmlFor="poetry_slug">Poetry Slug</Label>
              <div className="flex gap-2">
                <Input
                  id="poetry_slug"
                  value={poetrySlug}
                  onChange={(e) => setPoetrySlug(e.target.value)}
                  placeholder="poetry-slug"
                  disabled={!hasSindhiTitle || currentStatus === 'published'}
                />
                {hasSindhiTitle && !hasSlug && (
                  <Button 
                    type="button" 
                    variant="outline" 
                    size="sm" 
                    onClick={generateSlug}
                    disabled={loading}
                  >
                    <Wand2 className="w-4 h-4 mr-2" />
                    Generate Slug
                  </Button>
                )}
              </div>
            </div>
            <div>
              <Label htmlFor="poetry_tags">Tags</Label>
              <Input
                id="poetry_tags"
                value={poetryTags}
                onChange={(e) => setPoetryTags(e.target.value)}
                placeholder="Comma-separated tags"
                disabled={!hasSindhiTitle}
              />
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Two-Pane Layout */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Left Pane - Sindhi Content */}
        <Card className="mb-6">
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle>Couplets (Sindhi)</CardTitle>
              <Button variant="outline" size="sm" onClick={addCouplet} disabled={!hasSlug}>
                <Plus className="w-4 h-4 mr-2" />
                Add Couplet
              </Button>
            </div>
          </CardHeader>
          <CardContent className="space-y-4">
            {sindhiCouplets.map((couplet, index) => (
              <div key={index} className="border rounded-lg p-4 space-y-3">
                <div className="flex items-center justify-between">
                  <Badge variant="secondary">Couplet {index + 1}</Badge>
                  <div className="flex items-center gap-2">
                    {couplet.romanized && (
                      <Badge variant="default" className="text-green-600">
                        <Check className="w-4 h-4 mr-1" />
                        Romanized
                      </Badge>
                    )}
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => removeCouplet(index)}
                      disabled={!hasSlug}
                    >
                      <X className="w-4 h-4" />
                    </Button>
                  </div>
                </div>
                
                <div>
                  <Label>Couplet Text *</Label>
                  <Textarea
                    value={couplet.text}
                    onChange={(e) => updateCouplet(index, 'text', e.target.value)}
                    placeholder="شاعري جو مصرع"
                    rows={3}
                    className="sindhi-text text-right"
                    dir="rtl"
                    style={{ direction: 'rtl', textAlign: 'right' }}
                    required
                    disabled={!hasSlug}
                  />
                </div>
                
                <div>
                  <Label>Slug</Label>
                  <Input
                    value={couplet.slug}
                    onChange={(e) => updateCouplet(index, 'slug', e.target.value)}
                    placeholder="couplet-slug"
                    disabled={!hasSlug || currentStatus === 'published'}
                  />
                </div>
              </div>
            ))}
            
            {sindhiCouplets.length === 0 && (
              <div className="text-center text-muted-foreground py-8">
                <BookOpen className="w-12 h-12 mx-auto mb-4 text-muted-foreground/50" />
                <p>No couplets added yet. Click &ldquo;Add Couplet&rdquo; to get started.</p>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Right Pane - Roman/English Content */}
        <Card className="mb-6">
          <CardHeader>
            <div className="flex items-center justify-between">
              <CardTitle>Romanization (English)</CardTitle>
              <div className="flex items-center gap-2">
                {hasEnglishTitle && sindhiCouplets.length > 0 && (
                  <Button variant="outline" size="sm" onClick={generateAllRoman} disabled={loading}>
                    <Wand2 className="w-4 h-4 mr-2" />
                    Add Roman
                  </Button>
                )}
                {currentStatus === 'ready_for_roman' && (
                  <Button variant="outline" size="sm" onClick={markReadyForPublish}>
                    <CheckCircle className="w-4 h-4 mr-2" />
                    Ready for Publish
                  </Button>
                )}
              </div>
            </div>
          </CardHeader>
          <CardContent className="space-y-4">
            {englishCouplets.map((couplet, index) => (
              <div key={index} className="border rounded-lg p-4 space-y-3">
                <div className="flex items-center justify-between">
                  <Badge variant="outline">Couplet {index + 1}</Badge>
                  <div className="flex items-center gap-2">
                    {couplet.autoGenerated && (
                      <Badge variant="secondary" className="text-blue-600">
                        <Wand2 className="w-4 h-4 mr-1" />
                        Auto-generated
                      </Badge>
                    )}
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => removeCouplet(index)}
                      disabled={!hasEnglishTitle}
                    >
                      <X className="w-4 h-4" />
                    </Button>
                  </div>
                </div>
                
                <div>
                  <Label>English Text</Label>
                  <Textarea
                    value={couplet.text}
                    onChange={(e) => updateEnglishCouplet(index, 'text', e.target.value)}
                    placeholder="English transliteration"
                    rows={3}
                    className={couplet.autoGenerated ? 'border-blue-200 bg-blue-50/50' : ''}
                    disabled={!hasEnglishTitle}
                  />
                </div>
                
                <div className="flex items-center gap-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => regenerateRoman(index)}
                    disabled={!hasEnglishTitle || !sindhiCouplets[index]?.text}
                  >
                    <RefreshCw className="w-4 h-4 mr-2" />
                    Regenerate
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => editManually(index)}
                    disabled={!hasEnglishTitle}
                  >
                    <Edit className="w-4 h-4 mr-2" />
                    Edit Manually
                  </Button>
                </div>
              </div>
            ))}
            
            {englishCouplets.length === 0 && (
              <div className="text-center text-muted-foreground py-8">
                <Type className="w-12 h-12 mx-auto mb-4 text-muted-foreground/50" />
                <p>Romanization will appear here after generating from Sindhi couplets.</p>
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* Workflow Controls */}
      <Card className="mb-6">
        <CardContent className="p-6">
          <div className="flex items-center justify-between">
            <div className="space-y-2">
              <h3 className="font-semibold">Workflow Status</h3>
              <div className="flex items-center gap-2">
                <div className={`w-3 h-3 rounded-full ${currentStatus === 'draft' ? 'bg-gray-400' : 'bg-gray-200'}`} />
                <span className="text-sm text-muted-foreground">Draft</span>
                <ArrowRight className="w-4 h-4 text-muted-foreground" />
                <div className={`w-3 h-3 rounded-full ${currentStatus === 'ready_for_roman' ? 'bg-blue-500' : 'bg-gray-200'}`} />
                <span className="text-sm text-muted-foreground">Ready for Roman</span>
                <ArrowRight className="w-4 h-4 text-muted-foreground" />
                <div className={`w-3 h-3 rounded-full ${currentStatus === 'published' ? 'bg-green-500' : 'bg-gray-200'}`} />
                <span className="text-sm text-muted-foreground">Published</span>
              </div>
            </div>
            
            <div className="flex items-center gap-3">
              {currentStatus === 'draft' && (
                <Button variant="outline" onClick={saveAsDraft} disabled={loading}>
                  <Save className="w-4 h-4 mr-2" />
                  Save Draft
                </Button>
              )}
              
              {currentStatus === 'draft' && canProceedToRoman() && (
                <Button onClick={markReadyForRoman}>
                  <ArrowRight className="w-4 h-4 mr-2" />
                  Ready for Roman
                </Button>
              )}
              
              {currentStatus === 'ready_for_roman' && canPublish() && (
                <Button onClick={publishPoetry} className="bg-green-600 hover:bg-green-700" disabled={loading}>
                  <Globe className="w-4 h-4 mr-2" />
                  Publish Poetry
                </Button>
              )}
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Validation Errors */}
      {validationErrors.length > 0 && (
        <Card className="border-destructive/20 bg-destructive/5">
          <CardContent className="p-4">
            <h4 className="font-medium text-destructive mb-2">Validation Errors</h4>
            <ul className="space-y-1">
              {validationErrors.map((error, index) => (
                <li key={index} className="text-sm text-destructive flex items-center gap-2">
                  <X className="w-4 h-4" />
                  {error}
                </li>
              ))}
            </ul>
          </CardContent>
        </Card>
      )}

      {/* Action Buttons */}
      <div className="flex justify-between">
        <div className="flex items-center gap-2">
          {typeof window !== 'undefined' && new URLSearchParams(window.location.search).get('mode')?.includes('from_romanizer') && (
            <Button
              type="button"
              variant="outline"
              onClick={() => router.push('/admin/romanizer')}
              className="text-blue-600 border-blue-200 hover:bg-blue-50"
            >
              <ArrowLeft className="w-4 h-4 mr-2" />
              Back to Romanizer
            </Button>
          )}
        </div>
        
        <div className="flex space-x-3">
          <Button
            type="button"
            variant="outline"
            onClick={() => router.push('/admin/poetry')}
          >
            Cancel
          </Button>
        
        <Button type="submit" disabled={loading}>
          {loading ? (
            <>
              <Loader2 className="w-4 h-4 mr-2 animate-spin" />
              Processing...
            </>
          ) : (
            <>
              {currentStatus === 'draft' ? (
                <>
                  <Save className="w-4 h-4 mr-2" />
                  Save Draft
                </>
              ) : currentStatus === 'ready_for_roman' ? (
                <>
                  <CheckCircle className="w-4 h-4 mr-2" />
                  Ready for Publish
                </>
              ) : (
                <>
                  <Globe className="w-4 h-4 mr-2" />
                  Publish Poetry
                </>
              )}
            </>
          )}
        </Button>
      </div>
    </div>
      </fieldset>
  </form>
  );
}
